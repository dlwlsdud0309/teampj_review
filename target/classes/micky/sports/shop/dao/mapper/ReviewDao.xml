<!-- 1.IDao.xml 파일 생성 시 기존에 있던 내용 전부 삭제 -->
<!-- 2.https://mybatis.org/mybatis-3/configuration.html 에서 mapper 소스 복사하여 붙여넣기 -->
<!-- 3.namespace에 Interface IDao 경로 복사하여 붙여넣기 -->
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="micky.sports.shop.dao.ReviewDao">

	<!-- 1.join위해 사용한 ReviewDto -->
	<resultMap type="micky.sports.shop.dto.ReviewDto" id="ReviewDto">
		<result column="m_id" property="m_id" />
		<result column="r_no" property="r_no" />
		<result column="r_title" property="r_title" />
		<result column="r_content" property="r_content" />
		<result column="r_id" property="r_id" />
		<result column="r_retitle" property="r_retitle" />
		<result column="r_recontent" property="r_recontent" />
		<result column="r_ynn" property="r_ynn" />
		<result column="r_date" property="r_date" />
		<result column="r_group" property="r_group" />
		<result column="r_step" property="r_step" />
		<result column="r_indent" property="r_indent" />
		<result column="r_filesrc" property="r_filesrc" />
		<result column="r_score" property="r_score"/>
		<collection property="memberDto" resultMap="MemberDto" />
		<collection property="productDto" resultMap="ProductDto" />
		<collection property="ordermemberDto" resultMap="OrderMemberDto" />
	</resultMap>
	
	<!-- 2.join위해 사용한 MemberDto -->
	<resultMap type="micky.sports.shop.dto.MemberDto" id="MemberDto">
		<result column="m_id" property="m_id" />
		<result column="m_pw" property="m_pw" />
		<result column="m_name" property="m_name" />
		<result column="m_tel" property="m_tel" />
		<result column="m_name2" property="m_name2" />
		<result column="m_email" property="m_email" />
		<result column="m_grade" property="m_grade" />
		<result column="m_age" property="m_age" />
		<result column="m_gender" property="m_gender" />
		<result column="m_cash" property="m_cash" />
		<result column="m_filesrc" property="m_filesrc" />
	</resultMap>
	
	<!-- 3.join위해 사용한 ProductDto -->
	<resultMap type="micky.sports.shop.dto.ProductDto" id="ProductDto">
		<result column="p_no" property="p_no"/>
		<result column="p_name" property="p_name"/>
		<result column="p_price" property="p_price"/>
		<result column="p_cnt" property="p_cnt"/>
		<result column="p_color" property="p_color"/>
		<result column="p_size" property="p_size"/>
		<result column="p_filesrc" property="p_filesrc"/>
		<result column="p_date" property="p_date"/>
		<result column="p_category" property="p_category"/>
		<result column="p_info" property="p_info"/>
	</resultMap>
	
	<!-- 4.join위해 사용한 OrderMemberDto -->
	<resultMap type="micky.sports.shop.dto.OrderMemberDto" id="OrderMemberDto">
		<result column="om_cntnum" property="om_cntnum" />
    	<result column="om_num" property="om_num" />
    	<result column="p_no" property="p_no" />
    	<result column="u_cnt" property="u_cnt" />
    	<result column="m_id" property="m_id" />
    	<result column="om_date" property="om_date" />
    	<result column="om_pay" property="om_pay" />
    	<result column="p_price" property="p_price" />
    	<result column="om_state" property="om_state" />
    	<result column="om_cancle" property="om_cancle" />
    	<result column="om_cdate" property="om_cdate" />
    	<result column="c_reason" property="c_reason" />
    	<collection property="memberDto" resultMap="MemberDto" />
		<collection property="productDto" resultMap="ProductDto" />
		<collection property="reviewDto" resultMap="ReviewDto" />
	</resultMap>
	
	<!-- productDetail 하단부에 표시될 리뷰 -->
	<select id="reviewboard" parameterType="micky.sports.shop.dto.ReviewDto" resultMap="ReviewDto">
		SELECT R.*
		FROM (SELECT
		R.R_NO,
		O.OM_CNTNUM,O.P_NO,O.OM_STATE,
		M.M_ID,R.R_TITLE,R.R_CONTENT,R.R_ID,R.R_RETITLE,
		R.R_RECONTENT,R.R_YNN,R.R_DATE,R.R_GROUP,R.R_STEP,R.R_INDENT,R.R_FILESRC,R.R_SCORE,
		P.P_NAME,P.P_COLOR,P.P_SIZE
		FROM MEMBER M, REVIEW R, PRODUCT P, ORDER_MEMBER O
		WHERE R.M_ID=M.M_ID
		AND R.P_NO=P.P_NO
		AND R.M_ID=O.M_ID
		AND P_NAME=#{param3}
		AND R.R_CONTENT like '%'||#{param2}||'%'
		AND OM_STATE='결제완료'
		ORDER BY
		<choose>
			<when test="param1 eq 'r_group'">R_GROUP DESC</when>
			<otherwise>R_SCORE DESC, R_GROUP DESC</otherwise>
		</choose>
		) R
		
		<!-- 페이징 삭제하고 더보기 기능 이용한 쿼리 -->	
		<!-- SELECT ROWNUM, R.*
		FROM (SELECT R.R_NO,M.M_ID,R.R_TITLE,R.R_CONTENT,R.R_ID,R.R_RETITLE,
		R.R_RECONTENT,R.R_YNN,R.R_DATE,R.R_GROUP,R.R_STEP,R.R_INDENT,R.R_FILESRC,R.R_SCORE,
		P.P_NO,P.P_NAME,P.P_COLOR,P.P_SIZE
		FROM MEMBER M, REVIEW R, PRODUCT P
		WHERE M.M_ID=R.M_ID
		AND R.P_NO=P.P_NO
		AND P_NAME=#{param3}
		AND R.R_CONTENT like '%'||#{param2}||'%'
		ORDER BY
		<choose>
			<when test="param1 eq 'r_group'">R_GROUP DESC</when>
			<otherwise>R_SCORE DESC, R_GROUP DESC</otherwise>
		</choose>
		) R -->
		
		<!-- ============================Product와 join 이전 쿼리=============================== -->		
	        <!-- SELECT ROWNUM,R_NO,M_ID,R_TITLE,R_CONTENT,R_ID,R_RETITLE,
			R_RECONTENT,R_YNN,R_DATE,R_GROUP,R_STEP,R_INDENT,R_FILESRC,R_SCORE
			FROM (SELECT ROWNUM ROWNO,R.* FROM
			(SELECT R.R_NO,M.M_ID,R.R_TITLE,R.R_CONTENT,R.R_ID,R.R_RETITLE,
			R.R_RECONTENT,R.R_YNN,R.R_DATE,R.R_GROUP,R.R_STEP,R.R_INDENT,R.R_FILESRC,R.R_SCORE
			FROM MEMBER M, REVIEW R
			WHERE M.M_ID=R.M_ID
			ORDER BY R.R_GROUP DESC, R.R_STEP ASC) R
			
	        <include refid="includeReviewBoard"/>
	        )
	        WHERE ROWNO BETWEEN #{param1} AND #{param2} -->
		<!-- ============================Product와 join 이전 쿼리=============================== -->
		
		<!-- 검색어 넣고2 -->
		<!-- SELECT ROWNUM,R_NO,M_ID,R_TITLE,R_CONTENT,R_ID,R_RETITLE,
		R_RECONTENT,R_YNN,R_DATE,R_GROUP,R_STEP,R_INDENT,R_FILESRC,R_SCORE
		FROM (SELECT ROWNUM ROWNO,R.* FROM
		(SELECT R.R_NO,M.M_ID,R.R_TITLE,R.R_CONTENT,R.R_ID,R.R_RETITLE,
		R.R_RECONTENT,R.R_YNN,R.R_DATE,R.R_GROUP,R.R_STEP,R.R_INDENT,R.R_FILESRC,R.R_SCORE
		FROM MEMBER M, REVIEW R
		WHERE M.M_ID=R.M_ID
		ORDER BY R.R_GROUP DESC, R.R_STEP ASC) R)
		<include refid="includeReviewBoard"/> -->
		
		
		<!-- 오라클 join -->
		<!-- SELECT R.R_NO,M.M_ID,R.R_TITLE,R.R_CONTENT,R.R_ID,R.R_RETITLE,
		R.R_RECONTENT,R.R_YNN,R.R_DATE,R.R_GROUP,R.R_STEP,R.R_INDENT,R.R_FILESRC,R.R_SCORE
		FROM MEMBER M, REVIEW R
		WHERE M.M_ID=R.M_ID
		ORDER BY R.R_GROUP DESC, R.R_STEP ASC -->
		
		<!-- ansi join -->
		<!-- SELECT R.R_NO,M.M_ID,R.R_TITLE,R.R_CONTENT,R.R_ID,R.R_RETITLE,
		R.R_RECONTENT,R.R_YNN,R.R_DATE,R.R_GROUP,R.R_STEP,R.R_INDENT,R.R_FILESRC,R.R_SCORE
		FROM MEMBER M INNER JOIN REVIEW R
		ON M.M_ID=R.M_ID
		ORDER BY R.R_GROUP DESC, R.R_STEP ASC -->
		
		<!-- rownum과 join 함께 사용 -->
		<!-- SELECT ROWNUM, R_NO,M_ID,R_TITLE,R_CONTENT,R_ID,R_RETITLE,
		R_RECONTENT,R_YNN,R_DATE,R_GROUP,R_STEP,R_INDENT,R_FILESRC,R_SCORE
		FROM (SELECT ROWNUM ROWNO,R.* FROM
		(SELECT R.R_NO,M.M_ID,R.R_TITLE,R.R_CONTENT,R.R_ID,R.R_RETITLE,
		R.R_RECONTENT,R.R_YNN,R.R_DATE,R.R_GROUP,R.R_STEP,R.R_INDENT,R.R_FILESRC,R.R_SCORE
		FROM MEMBER M, REVIEW R
		WHERE M.M_ID=R.M_ID
		ORDER BY R.R_GROUP DESC, R.R_STEP ASC) R)
		WHERE ROWNO BETWEEN #{param1} AND #{param2} -->
		
	</select>
	
	<!-- 글작성 -->
	<insert id="write">
		INSERT INTO REVIEW VALUES(REVIEW_SEQ.NEXTVAL,#{param1},
		#{param2},#{param3},'','','','n',SYSDATE,
		REVIEW_SEQ.CURRVAL,0,0,#{param4},#{param5},#{param6},#{param7})
	</insert>
	
	<!-- 글삭제 -->
	<delete id="delete">
		DELETE FROM REVIEW WHERE R_NO=#{param1}
	</delete>

	<!-- 로그인 한 id가 작성할 수 있는 구매내역 출력, null값 포함됨 -->
	<select id="reviewOrderlist" parameterType="micky.sports.shop.dto.OrderMemberDto" resultMap="OrderMemberDto">
		<!-- left outer join 사용, select에 필요한 칼럼 전부 작성 -->
		SELECT ORDER_MEMBER.OM_CNTNUM,ORDER_MEMBER.OM_NUM,PRODUCT.P_NO,ORDER_MEMBER.U_CNT,ORDER_MEMBER.M_ID,
		ORDER_MEMBER.OM_DATE,ORDER_MEMBER.P_PRICE,ORDER_MEMBER.OM_STATE,
		REVIEW.R_CONTENT,
		PRODUCT.P_NAME,PRODUCT.P_PRICE,PRODUCT.P_COLOR,PRODUCT.P_SIZE,PRODUCT.P_FILESRC
		FROM ORDER_MEMBER
		LEFT JOIN REVIEW
		ON REVIEW.OM_CNTNUM=ORDER_MEMBER.OM_CNTNUM
		LEFT JOIN PRODUCT
		ON PRODUCT.P_NO=ORDER_MEMBER.P_NO
		WHERE ORDER_MEMBER.M_ID=#{param1}
		AND ORDER_MEMBER.OM_STATE='결제완료'
		AND ORDER_MEMBER.OM_CANCLE='N'
		AND REVIEW.R_CONTENT IS NULL
		ORDER BY ORDER_MEMBER.OM_DATE DESC
	</select>
	
	<!-- 로그인 한 id가 작성한 리뷰글 전부 출력 -->
	<select id="mylistview" parameterType="micky.sports.shop.dto.ReviewDto" resultMap="ReviewDto">
		SELECT R.R_NO,
		R.OM_CNTNUM,O.P_NO,O.OM_STATE,O.OM_CANCLE,
		M.M_ID,R.R_TITLE,R.R_CONTENT,R.R_ID,R.R_RETITLE,
		R.R_RECONTENT,R.R_YNN,R.R_DATE,R.R_GROUP,R.R_STEP,R.R_INDENT,R.R_FILESRC,R.R_SCORE,
		P.P_NAME,P.P_COLOR,P.P_SIZE,P.P_FILESRC
		FROM MEMBER M, REVIEW R, PRODUCT P, ORDER_MEMBER O
		WHERE M.M_ID=R.M_ID
		AND R.P_NO=P.P_NO
		AND R.OM_CNTNUM=O.OM_CNTNUM
		AND M.M_ID=#{param1}
		AND O.OM_STATE='결제완료'
		AND O.OM_CANCLE='N'
		ORDER BY R.R_GROUP DESC
	</select>
	
	<select id="popupview" resultType="micky.sports.shop.dto.ReviewDto">
		SELECT R_NO,M_ID,R_TITLE,R_CONTENT,R_ID,R_RETITLE,
		R_RECONTENT,R_YNN,R_DATE,R_GROUP,R_STEP,R_INDENT,R_FILESRC,R_SCORE,P_NO FROM REVIEW
		WHERE R_NO=#{param1}
		ORDER BY R_GROUP DESC, R_STEP ASC
	</select>
	
	<!-- <select id="popupupdate" resultType="micky.sports.shop.dto.ReviewDto">
		SELECT R_NO,M_ID,R_TITLE,R_CONTENT,R_RETITLE,
		R_RECONTENT,R_YNN,R_DATE,R_GROUP,R_STEP,R_INDENT,R_FILESRC FROM REVIEW
		WHERE R_NO=#{param1}
	</select> -->
	
	<update id="modify">
		UPDATE REVIEW SET R_TITLE=#{param2},
		R_CONTENT=#{param3}, R_SCORE=#{param4}, R_FILESRC=#{param5}
		WHERE R_NO=#{param1}
	</update>
	
	<select id="replyview" resultType="micky.sports.shop.dto.ReviewDto">
		SELECT R_NO,M_ID,R_TITLE,R_CONTENT,R_ID,R_RETITLE,
		R_RECONTENT,R_YNN,R_DATE,R_GROUP,R_STEP,R_INDENT,R_FILESRC,R_SCORE,P_NO FROM REVIEW
		WHERE R_NO=#{param1}
		ORDER BY R_GROUP DESC, R_STEP ASC
	</select>
	
	<select id="totalCount" resultType="Integer">
		SELECT COUNT(*)
		FROM MEMBER M, REVIEW R, PRODUCT P
		WHERE M.M_ID=R.M_ID
		AND R.P_NO=P.P_NO
		AND P_NAME=#{param1}
	
		<!-- SELECT COUNT(*) FROM REVIEW -->
	</select>
	
	<update id="replyUpdate">
		UPDATE REVIEW SET R_ID=#{param2},
		R_RETITLE=#{param3}, R_RECONTENT=#{param4, jdbcType=VARCHAR},
		R_YNN='y' WHERE R_NO=#{param1}
	</update>
	
	<update id="replydelete">
		UPDATE REVIEW SET R_ID='',
		R_RETITLE='', R_RECONTENT='',
		R_YNN='n' WHERE R_NO=#{param1}
	</update>
	
	<!-- <select id="totalStarscore" resultType="Integer">
		SELECT SUM(R.R_SCORE)
		FROM MEMBER M, REVIEW R, PRODUCT P
		WHERE M.M_ID=R.M_ID
		AND R.P_NO=P.P_NO
		AND P.P_NAME=#{param1}
	</select> -->

	<select id="avgStarscore" resultType="double">
		SELECT ROUND(AVG(R.R_SCORE),1)
		FROM MEMBER M, REVIEW R, PRODUCT P
		WHERE M.M_ID=R.M_ID
		AND R.P_NO=P.P_NO
		AND P.P_NAME=#{param1}
	</select>
	
	
	<!-- <select id="replyTotalCount" resultType="micky.sports.shop.dto.ReviewDto">
		SELECT COUNT(R_RECONTENT) R_RECONTENT FROM REVIEW GROUP BY R_NO ORDER BY R_NO
		SELECT COUNT(R_RECONTENT) FROM REVIEW WHERE R_NO=#{param1, jdbcType=INTEGER}
	</select> -->
	
	<!-- <select id="totalCount1" resultType="Integer">
		SELECT COUNT(*) FROM REVIEW WHERE R_CONTENT LIKE '%'||#{param1}||'%'
	</select>
	
	<select id="totalCount2" resultType="Integer">
		SELECT COUNT(*) FROM REVIEW WHERE R_CONTENT LIKE '%'||#{param1}||'%'
	</select>
	
	<select id="totalCount3" resultType="Integer">
		SELECT COUNT(*) FROM REVIEW WHERE R_CONTENT LIKE '%'||#{param1}||'%'
	</select> -->
	
	
</mapper>